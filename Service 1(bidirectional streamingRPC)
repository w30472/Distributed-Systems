// Server implementation
public class CameraServiceImpl extends SmartCameraServiceGrpc.SmartCameraServiceImplBase {
    @Override
    public StreamObserver<StartCameraRequest> startCamera(StreamObserver<CameraFeed> responseObserver) {
        return new StreamObserver<StartCameraRequest>() {
            @Override
            public void onNext(StartCameraRequest request) {
                // Handle incoming request
                String cameraId = request.getCameraId();
                System.out.println("Starting camera: " + cameraId);

                // Start video feed for the given camera
                // ...

                // Send video feed back to client
                CameraFeed cameraFeed = CameraFeed.newBuilder()
                        .setCameraId(cameraId)
                        .setVideoFeed(ByteString.copyFrom(/* video feed data */))
                        .build();
                responseObserver.onNext(cameraFeed);
            }

            @Override
            public void onError(Throwable t) {
                // Handle errors
            }

            @Override
            public void onCompleted() {
                // Handle end of stream
                responseObserver.onCompleted();
            }
        };
    }
}

// Client implementation
public class CameraClient {
    public void startCameraStreaming() {
        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50051)
                .usePlaintext()
                .build();
        SmartCameraServiceGrpc.SmartCameraServiceStub stub = SmartCameraServiceGrpc.newStub(channel);

        StreamObserver<StartCameraRequest> requestObserver = stub.startCamera(new StreamObserver<CameraFeed>() {
            @Override
            public void onNext(CameraFeed cameraFeed) {
                // Handle incoming camera feed
                String cameraId = cameraFeed.getCameraId();
                ByteString videoFeed = cameraFeed.getVideoFeed();
                System.out.println("Received camera feed for camera: " + cameraId);
                // ...
            }

            @Override
            public void onError(Throwable t) {
                // Handle errors
            }

            @Override
            public void onCompleted() {
                // Handle end of stream
                System.out.println("Camera feed streaming completed");
            }
        });

        // Send requests to start video feeds for multiple cameras
        requestObserver.onNext(StartCameraRequest.newBuilder()
                .setCameraId("camera1")
                .build());

        requestObserver.onNext(StartCameraRequest.newBuilder()
                .setCameraId("camera2")
                .build());

        // End the request stream
        requestObserver.onCompleted();
    }
}
