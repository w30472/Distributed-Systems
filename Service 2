package com.example.smartthermostat.grpc;

import com.example.smartthermostat.*;

import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.stub.StreamObserver;

import java.io.IOException;

public class SmartThermostatServer {
  public static void main(String[] args) throws IOException, InterruptedException {
    int port = 50051;
    Server server = ServerBuilder.forPort(port)
        .addService(new SmartThermostatServiceImpl())
        .build()
        .start();
    System.out.println("SmartThermostatService started, listening on " + port);
    server.awaitTermination();
  }

  static class SmartThermostatServiceImpl extends SmartThermostatServiceGrpc.SmartThermostatServiceImplBase {
    @Override
    public void getTemperature(GetTemperatureRequest request, StreamObserver<GetTemperatureResponse> responseObserver) {
      // TODO: Implement logic to retrieve temperature for the specified room ID.
      double temperature = 22.5; // dummy value for example purposes
      GetTemperatureResponse response = GetTemperatureResponse.newBuilder()
          .setTemperature(temperature)
          .build();
      responseObserver.onNext(response);
      responseObserver.onCompleted();
    }

    @Override
    public void setTemperature(SetTemperatureRequest request, StreamObserver<SetTemperatureResponse> responseObserver) {
      // TODO: Implement logic to set temperature for the specified room ID.
      double temperature = request.getTemperature();
      // dummy logic to check if temperature is valid
      if (temperature < 10 || temperature > 30) {
        SetTemperatureResponse response = SetTemperatureResponse.newBuilder()
            .setStatus(io.grpc.Status.INVALID_ARGUMENT.withDescription("Temperature must be between 10 and 30 Celsius"))
            .build();
        responseObserver.onNext(response);
        responseObserver.onCompleted();
        return;
      }
      SetTemperatureResponse response = SetTemperatureResponse.newBuilder()
          .setEmpty(com.google.protobuf.Empty.getDefaultInstance())
          .build();
      responseObserver.onNext(response);
      responseObserver.onCompleted();
    }
  }
}

