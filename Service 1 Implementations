public class SmartCameraServiceImpl extends SmartCameraServiceGrpc.SmartCameraServiceImplBase {

  private final ExecutorService executor = Executors.newCachedThreadPool();

  @Override
  public void startCamera(StartCameraRequest request, StreamObserver<CameraFeed> responseObserver) {
    String cameraId = request.getCameraId();
    Camera camera = CameraManager.getInstance().getCamera(cameraId);

    if (camera == null) {
      String errorMsg = String.format("Camera with ID '%s' not found.", cameraId);
      responseObserver.onError(Status.NOT_FOUND.withDescription(errorMsg).asException());
      return;
    }

    executor.submit(() -> {
      while (true) {
        byte[] frame = camera.getNextFrame();
        if (frame == null) {
          responseObserver.onCompleted();
          return;
        }
        CameraFeed cameraFeed = CameraFeed.newBuilder().setVideoFeed(ByteString.copyFrom(frame)).build();
        responseObserver.onNext(cameraFeed);
      }
    });
  }

  @Override
  public void stopCamera(StopCameraRequest request, StreamObserver<StopCameraResponse> responseObserver) {
    String cameraId = request.getCameraId();
    Camera camera = CameraManager.getInstance().getCamera(cameraId);

    if (camera == null) {
      String errorMsg = String.format("Camera with ID '%s' not found.", cameraId);
      responseObserver.onError(Status.NOT_FOUND.withDescription(errorMsg).asException());
      return;
    }

    camera.stop();
    StopCameraResponse response = StopCameraResponse.newBuilder().build();
    responseObserver.onNext(response);
    responseObserver.onCompleted();
  }

  @Override
  public StreamObserver<SaveCameraFeedRequest> saveCameraFeed(StreamObserver<SaveCameraFeedResponse> responseObserver) {
    return new StreamObserver<SaveCameraFeedRequest>() {
      List<byte[]> frames = new ArrayList<>();

      @Override
      public void onNext(SaveCameraFeedRequest request) {
        byte[] frame = request.getFrame().toByteArray();
        frames.add(frame);
      }

      @Override
      public void onError(Throwable t) {
        String errorMsg = "Failed to save camera feed frames.";
        responseObserver.onError(Status.INTERNAL.withDescription(errorMsg).asException());
      }

      @Override
      public void onCompleted() {
        String filename = String.format("camera_feed_%d.mp4", System.currentTimeMillis());
        String filepath = String.format("/data/camera_feeds/%s", filename);

        try {
          saveFramesToDisk(frames, filepath);
        } catch (IOException e) {
          String errorMsg = String.format("Failed to save camera feed to disk: %s", e.getMessage());
          responseObserver.onError(Status.INTERNAL.withDescription(errorMsg).asException());
          return;
        }

        SaveCameraFeedResponse response = SaveCameraFeedResponse.newBuilder().setFilePath(filepath).build();
        responseObserver.onNext(response);
        responseObserver.onCompleted();
      }
    };
  }

  private void saveFramesToDisk(List<byte[]> frames, String filepath) throws IOException {
    FFmpegFrameRecorder recorder = new FFmpegFrameRecorder(filepath, 640, 480);
    recorder.setFormat("mp4");
    recorder.setFrameRate(30);
    recorder.start();

    for (byte[] frame : frames) {
      recorder.record(new Frame(640, 480, Frame.DEPTH_UBYTE, 3, frame));
    }

    recorder.stop();
    recorder.release();
  }
}
